{"version":3,"sources":["chess.js","bot.js","App.js","index.js"],"names":["WHITE","BLACK","PIECE_UNICODE","_PIECE_UNICODE","Object","defineProperty","_BLACK","_WHITE","NEW_BOARD","pieces","colors","withinBounds","i","j","evaluated","time","ROOK_DIRS","BISHOP_DIRS","OMNI_DIRS","KNIGHT_DIRS","ChessBoard","classCallCheck","this","newBoard","createClass","key","value","board","_","cloneDeep","moves","direction","opponent","p","oi","oj","result","push","_this","piece","color","forward","firstMove","i1","jL","jR","i2","forEach","d","concat","progressiveMoves","j1","move","_this$board","moveData","pop","_moveData","slicedToArray","_move","j2","_this$board2","_this2","filter","colorAt","movePiece","kingIsInDanger","undoMove","allMovesForColor","length","filterLegalMoves","movesForPieceAt","allLegalMovesForColor","legalMovesForPieceAt","findIndex","m","PIECE_POINTS","_PIECE_POINTS","valueFunction","Math","random","smartBotMove","bestMove","bestScore","Date","getTime","alphabeta","depth","maximizing","alpha","arguments","undefined","Infinity","beta","turn","ct","max","min","console","log","Game","listeners","Set","Board","at","canMove","winner","checkWinner","triggerChange","cb","add","delete","l","Bot","handleGameChange","game","setTimeout","onChange","alert","Human","_ref","onCellClick","selected","allowedMoves","react_default","a","createElement","className","map","row","pieceUnicode","focus1","focus2","f","onClick","Fragment","HomeScreen","_ref2","newGame","EndScreen","_ref3","App_ChessBoard","App","_this3","possibleConstructorReturn","getPrototypeOf","call","handleCellClick","state","setState","feedback","human","bot","joinGame","forceUpdate","focus","React","Component","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.3ec97d40.chunk.js","sourcesContent":["import _ from 'lodash';\n\nexport const\n  PAWN = 'p',\n  KNIGHT = 'n',\n  BISHOP = 'b',\n  ROOK = 'r',\n  QUEEN = 'q',\n  KING = 'k';\n\nexport const\n  WHITE = 'w',\n  BLACK = 'b';\n\nexport const PIECE_UNICODE = {\n  [BLACK] : {\n    [ROOK]: '♜', [KNIGHT]: '♞', [BISHOP]: '♝',\n    [QUEEN]: '♛', [KING]: '♚', [PAWN]: '♟' \n  },\n  [WHITE] : {\n    [ROOK]: '♖', [KNIGHT]: '♘', [BISHOP]: '♗',\n    [QUEEN]: '♕', [KING]: '♔', [PAWN]: '♙'\n  }\n}\n\nexport const NEW_BOARD = {\n  pieces:\n    [\n      [ROOK, KNIGHT, BISHOP, QUEEN, KING, BISHOP, KNIGHT, ROOK],\n      [PAWN, PAWN, PAWN, PAWN, PAWN, PAWN, PAWN, PAWN],\n      [null, null, null, null, null, null, null, null],\n      [null, null, null, null, null, null, null, null],\n      [null, null, null, null, null, null, null, null],\n      [null, null, null, null, null, null, null, null],\n      [PAWN, PAWN, PAWN, PAWN, PAWN, PAWN, PAWN, PAWN],\n      [ROOK, KNIGHT, BISHOP, QUEEN, KING, BISHOP, KNIGHT, ROOK]\n    ],\n  colors:\n    [\n      [BLACK, BLACK, BLACK, BLACK, BLACK, BLACK, BLACK, BLACK],\n      [BLACK, BLACK, BLACK, BLACK, BLACK, BLACK, BLACK, BLACK],\n      [null, null, null, null, null, null, null, null],\n      [null, null, null, null, null, null, null, null],\n      [null, null, null, null, null, null, null, null],\n      [null, null, null, null, null, null, null, null],\n      [WHITE, WHITE, WHITE, WHITE, WHITE, WHITE, WHITE, WHITE],\n      [WHITE, WHITE, WHITE, WHITE, WHITE, WHITE, WHITE, WHITE]\n    ]\n}\n\nfunction withinBounds(i, j) {\n  return (i >= 0 && i <=7 && j >=0 && j <= 7);\n}\n\nconst\n  ROOK_DIRS = [[0, 1], [0, -1], [1, 0], [-1, 0]],\n  BISHOP_DIRS = [[1, 1], [-1, -1], [1, -1], [-1, 1]],\n  OMNI_DIRS = [\n    [0, 1], [0, -1], [1, 0], [-1, 0],\n    [1, 1], [-1, -1], [1, -1], [-1, 1]\n  ],\n  KNIGHT_DIRS = [\n    [2, 1], [-2, -1], [-2, 1], [2, -1],\n    [1, 2], [-1, -2], [-1, 2], [1, -2]\n  ];\n\n\nexport class ChessBoard {\n  constructor() {\n    this.newBoard();\n  }\n\n  newBoard() {\n    this.board = _.cloneDeep(NEW_BOARD);\n    this.moves = []\n  }\n\n  progressiveMoves(direction, i, j, opponent) {\n    var oi = 0, oj = 0, p, result = [];\n    do {\n      oi = oi + direction[0];\n      oj = oj + direction[1];\n      p = withinBounds(i + oi, j + oj) && this.board.colors[i + oi][j + oj];\n      if (p === null || p === opponent)\n        result.push([i, j, i + oi, j + oj])\n    } while (p === null);\n    return result;\n  }\n\n  colorAt(i, j) {\n    return this.board.colors[i][j];\n  }\n\n  movesForPieceAt(i, j) {\n    const\n      board = this.board,\n      { pieces, colors } = board,\n      piece = pieces[i][j],\n      color = colors[i][j],\n      opponent = color === BLACK ? WHITE : BLACK,\n      forward = color === WHITE ? -1 : 1;\n\n    var result = [];\n\n    if (piece === PAWN) {\n      const\n        firstMove = color === WHITE ? (i === 6) : (i === 1),\n        i1 = i + forward,\n        jL = j + 1,\n        jR = j - 1;\n\n      if (withinBounds(i1, jR) && colors[i1][jR] === opponent)\n        result.push([i, j, i1, jR])\n      if (withinBounds(i1, jL) && colors[i1][jL] === opponent)\n        result.push([i, j, i1, jL])\n      if (withinBounds(i1, j) && colors[i1][j] === null) {\n        result.push([i, j, i1, j])\n        if (firstMove) {\n          const i2 = i1 + forward;\n          if (withinBounds(i2, j) && colors[i2][j] === null)\n            result.push([i, j, i2, j])\n        }\n      }\n    }\n    else if (piece === ROOK) {\n      ROOK_DIRS.forEach(d => {\n        result = result.concat(this.progressiveMoves(d, i, j, opponent))\n      })\n    }\n    else if (piece === BISHOP) {\n      BISHOP_DIRS.forEach(d => {\n        result = result.concat(this.progressiveMoves(d, i, j, opponent))\n      })\n    }\n    else if (piece === QUEEN) {\n      OMNI_DIRS.forEach(d => {\n        result = result.concat(this.progressiveMoves(d, i, j, opponent))\n      })\n    }\n    else if (piece === KNIGHT) {\n      KNIGHT_DIRS.forEach(d => {\n        const\n          i1 = i + d[0],\n          j1 = j + d[1],\n          p = withinBounds(i1, j1) && colors[i1][j1];\n\n        if (p === null || p === opponent)\n          result.push([i, j, i1, j1])\n      })\n    }\n    else if (piece === KING) {\n      OMNI_DIRS.forEach(d => {\n        const\n          i1 = i + d[0],\n          j1 = j + d[1],\n          p = withinBounds(i1, j1) && colors[i1][j1];\n\n        if (p === null || p === opponent)\n          result.push([i, j, i1, j1]);\n      })\n    }\n    return result;\n  }\n\n  movePiece(move) {\n    const { pieces, colors } = this.board;\n    this.moves.push(\n      [move, pieces[move[2]][move[3]], colors[move[2]][move[3]]]\n    )\n\n    pieces[move[2]][move[3]] = pieces[move[0]][move[1]];\n    colors[move[2]][move[3]] = colors[move[0]][move[1]];\n    pieces[move[0]][move[1]] = null;\n    colors[move[0]][move[1]] = null;\n\n  }\n\n  undoMove() {\n    const\n      moveData = this.moves.pop(),\n      [move, piece, color] = moveData,\n      [i1, j1, i2, j2] = move,\n      { pieces, colors } = this.board;\n    \n    pieces[i1][j1] = pieces[i2][j2];\n    colors[i1][j1] = colors[i2][j2];\n    pieces[i2][j2] = piece;\n    colors[i2][j2] = color;\n  }\n\n  filterLegalMoves(moves) {\n    return moves.filter(move => {\n      const color = this.colorAt(move[0], move[1]);\n      this.movePiece(move);\n      const result = !this.kingIsInDanger(color);\n      this.undoMove();\n      return result;\n    });\n  }\n\n  kingIsInDanger(color) {\n    // Slow Algorithm. Can be optimized.\n    const\n      { pieces } = this.board,\n      opponent = color === WHITE ? BLACK : WHITE,\n      moves = this.allMovesForColor(opponent);\n\n    for (var i = 0; i < moves.length; i++)\n      if (pieces[moves[i][2]][moves[i][3]] === KING)\n        return true;\n  }\n\n  legalMovesForPieceAt(i, j) {\n    return this.filterLegalMoves(this.movesForPieceAt(i, j));\n  }\n\n  allMovesForColor(color) {\n    var i, j;\n    var result = [];\n    for (i = 0; i < 8; i++)\n      for (j = 0; j < 8; j++)\n        if (this.board.colors[i][j] === color)\n          result = result.concat(this.movesForPieceAt(i, j));\n    return result;\n  }\n\n  allLegalMovesForColor(color) {\n    return this.filterLegalMoves(this.allMovesForColor(color));\n  }\n\n  checkWinner() {\n    if (this.allLegalMovesForColor(BLACK).length === 0)\n      return WHITE;\n\n    if (this.allLegalMovesForColor(WHITE).length === 0)\n      return BLACK;\n\n    return null;\n  }\n\n  canMove(move) {\n    const moves = this.legalMovesForPieceAt(move[0], move[1]);\n    return moves.findIndex(m => m[2] === move[2] && m[3] === move[3]) !== -1;\n  }\n}\n","import {\n  PAWN, BISHOP, KNIGHT, ROOK, QUEEN, KING,\n  BLACK, WHITE\n} from './chess';\n\nconst PIECE_POINTS = {\n  [PAWN]: 1,\n  [BISHOP]: 6,\n  [KNIGHT]: 8,\n  [ROOK]: 11,\n  [QUEEN]: 18,\n  [KING]: 16\n}\n\nfunction valueFunction(board, color) {\n  var value = 0;\n  for (var i = 0; i < 8; i++) {\n    for (var j = 0; j < 8; j++) {\n      var piece = board.pieces[i][j];\n      if (piece)\n        value += PIECE_POINTS[piece] * (color === board.colors[i][j] ? 1 : -1);\n    }\n  }\n  return value + Math.random();\n}\n\nexport function dumbBotMove(board, color) {\n  const\n    moves = board.allLegalMovesForColor(color),\n    randomIndex = Math.floor(Math.random() * moves.length);\n\n  return moves[randomIndex]\n}\n\nvar evaluated, time;\nexport function smartBotMove(board, color) {\n  var bestMove, bestScore = null;\n  \n  evaluated = 0;\n  time = (new Date()).getTime();\n\n  board.allLegalMovesForColor(color).forEach(move => {\n    board.movePiece(move);\n    var value = alphabeta(board, color, 3, false);\n    if (bestScore === null || bestScore < value) {\n      bestScore = value;\n      bestMove = move;\n    }\n    board.undoMove();\n  });\n\n  console.log('Best Score: ', bestScore)\n  console.log('Nodes Evaluated: ', evaluated);\n  console.log('Time Taken: ', (new Date()).getTime() - time);\n\n  return bestMove;\n}\n\n\nexport function minimax(board, color, depth, maximizing) {\n  evaluated++;\n\n  if (depth === 0)\n    return valueFunction(board.board, color);\n\n  const\n    turn = (maximizing === true ? color : (color === BLACK ? WHITE : BLACK)),\n    moves = board.allMovesForColor(turn);\n\n  if (moves.length === 0)\n    return maximizing ? -Infinity : Infinity;\n\n  var value;\n  if (maximizing) {\n    value = -Infinity;\n    moves.forEach(move => {\n      board.movePiece(move);\n      value = Math.max(value, minimax(board, color, depth - 1, false));\n      board.undoMove();\n    });\n  } else {\n    value = Infinity;\n    moves.forEach(move => {\n      board.movePiece(move);\n      value = Math.min(value, minimax(board, color, depth - 1, true));\n      board.undoMove();\n    });\n  }\n  return value;\n}\n\n\nexport function alphabeta(board, color, depth, maximizing, alpha=-Infinity, beta=Infinity) {\n  evaluated++;\n\n  if (depth === 0)\n    return valueFunction(board.board, color);\n\n  const\n    turn = (maximizing === true ? color : (color === BLACK ? WHITE : BLACK)),\n    moves = board.allMovesForColor(turn);\n  \n  var value, ct;\n  if (maximizing) {\n    value = -Infinity;\n    for (ct = 0; ct < moves.length; ct++) {\n      board.movePiece(moves[ct]);\n      value = Math.max(value, alphabeta(board, color, depth - 1, false, alpha, beta));\n      alpha = Math.max(alpha, value);\n      board.undoMove();\n      if (alpha >= beta) break;\n    }\n  } else {\n    value = Infinity;\n    for (ct = 0; ct < moves.length; ct++) {\n      board.movePiece(moves[ct]);\n      value = Math.min(value, alphabeta(board, color, depth - 1, true, alpha, beta));\n      beta = Math.min(beta, value);\n      board.undoMove();\n      if (alpha >= beta) break;\n    }\n  }\n\n  return value;\n}","import React from 'react';\nimport { ChessBoard as Board, PIECE_UNICODE, WHITE, BLACK } from './chess';\nimport { smartBotMove } from './bot';\n\nimport './App.css';\n\nclass Game {\n  constructor() {\n    this.board = new Board();\n    this.at = 'home';\n  }\n\n  move(move) {    \n    if (this.at !== 'game')\n      return 'Game not started.';\n\n    const\n      board = this.board;\n\n    if (this.turn !== board.colorAt(move[0], move[1]))\n      return 'Not your turn';\n\n    if (!board.canMove(move))\n      return 'Invalid Move';\n    \n    board.movePiece(move);\n    this.turn = this.turn === WHITE ? BLACK : WHITE;\n\n    var winner = board.checkWinner();\n    if (winner) {\n      this.winner = winner;\n      this.at = 'end';\n    }\n\n    this.triggerChange();\n  }\n\n  newGame(i) {\n    this.board.newBoard();\n    this.at = 'game';\n    this.turn = WHITE;\n    this.triggerChange();\n  }\n\n  listeners = new Set();\n  onChange(cb) {\n    this.listeners.add(cb);\n    return _ => this.listeners.delete(cb);\n  }\n\n  triggerChange() {\n    this.listeners.forEach(l => l());\n  }\n}\n\n\n\nclass Bot {\n  joinGame(game) {\n    this.game = game;\n    game.onChange(this.handleGameChange);\n  }\n\n  handleGameChange = () => {\n    if (this.game.at === 'game' && this.game.turn === BLACK)\n      setTimeout(_ => this.move(), 100);\n  }\n\n  move() {\n    const move = smartBotMove(this.game.board, BLACK);\n\n    if (move)\n      return this.game.move(move);\n    \n    alert('Can\\t find a move')\n  }\n}\n\n\nclass Human {\n  joinGame(game) {\n    this.game = game;\n    game.onChange(this.handleGameChange);\n  }\n\n  handleGameChange() {\n  }\n\n  move(i1, j1, i2, j2) {\n    return this.game.move([i1, j1, i2, j2]);\n  }\n}\n\n\nfunction ChessBoard({ board, onCellClick, selected, allowedMoves }) {\n  return (\n    <div className=\"chess-board\">\n      { board.pieces.map((row, i) => (\n        <div key={i} className=\"chess-row\">\n          { row.map((piece, j) => {\n            const\n              pieceUnicode = piece && PIECE_UNICODE[board.colors[i][j]][piece],\n              focus1 = selected && selected[0] === i && selected[1] === j,\n              focus2 = selected && (\n                allowedMoves.findIndex(f => f[2] === i && f[3] === j) !== -1\n              );\n\n            return (\n              <div\n                key={j}\n                className={ 'chess-cell' + (focus1 ? ' cell-focus1' : '') }\n                onClick={_ => onCellClick(i, j)}>\n                { focus1 && <div className=\"focus1\" /> }\n                { focus2 && <div className=\"focus2\" /> }\n                { pieceUnicode ? \n                  <div className=\"piece\">{pieceUnicode}</div> :\n                  <>&nbsp;</>\n                }\n              </div>\n            )\n          }) }\n        </div>\n      )) }\n    </div>\n  )\n}\n\nfunction HomeScreen({ game }) {\n  return (\n    <div className=\"home-screen\">\n      <h1>Chess</h1>\n      <button onClick={_ => game.newGame()}>\n        New Game\n      </button>\n    </div>\n  )\n}\n\nfunction EndScreen({ game }) {\n  return (\n    <div className=\"end-screen\">\n      <ChessBoard board={game.board.board} onCellClick={_ => _}/>\n      <div className=\"text-center\">\n        <h2>{ game.winner === BLACK ? 'Black' : 'White' } Wins</h2>\n        <button onClick={_ => game.newGame()}>\n          New Game\n        </button>\n      </div>\n    </div>\n  )\n}\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.game = new Game();\n    this.human = new Human();\n    this.bot = new Bot();\n\n    this.human.joinGame(this.game);\n    this.bot.joinGame(this.game);\n\n    this.game.onChange(_ => this.forceUpdate());\n    this.state = {};\n  }\n\n  render() {\n    return (\n      <div className=\"app\">\n        {this.game.at === 'home' && (\n          <HomeScreen game={this.game} />\n        ) }\n\n        { this.game.at === 'game' && (\n          <ChessBoard\n            board={this.game.board.board}\n            onCellClick={this.handleCellClick}\n            selected={this.state.selected}\n            allowedMoves={this.state.allowedMoves}\n            focus={this.state.focus} />\n        ) }\n\n        { this.game.at === 'end' && (\n          <EndScreen game={this.game} />\n        ) }\n      </div>\n    );\n  }\n\n  handleCellClick = (i, j) => {\n    const\n      { board } = this.game,\n      { selected } = this.state;\n    \n    if (!this.state.selected) {\n      this.setState({\n        selected: [i, j],\n        allowedMoves: board.legalMovesForPieceAt(i, j)\n      })\n    } else {\n      var legalClick = this.state.allowedMoves.findIndex(move => move[2] === i && move[3] === j) !== -1;\n      if (legalClick) {\n        this.setState({ selected: null, allowedMoves: null });\n        var feedback = this.human.move(selected[0], selected[1], i, j);\n        if (feedback)\n          alert(feedback);\n      } else {\n        this.setState({ selected: null, allowedMoves: null });\n      }\n    }\n  }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './skeleton.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}