{"version":3,"sources":["helpers.js","Structured.js","App.js","serviceWorker.js","index.js"],"names":["EMPTY_BOARD","checkWin","board","i","j","r","b","possibleMoves","push","time","evaluated","smarterBotMove","bestMove","bestValue","Date","getTime","forEach","_ref3","value","minimax","depth","maximizing","winner","Infinity","Math","random","_ref","max","_ref2","min","console","log","Game","Object","classCallCheck","this","players","listeners","Set","at","playerTurn","player","id","triggerChange","_","cloneDeep","cb","_this","add","delete","l","Bot","handleGameChange","_this2","game","move","onChange","_smarterBotMove","Human","bot","human","GameDisplay","onClickCell","react_default","a","createElement","className","map","row","key","cell","onClick","e","joinGame","Structured","_this3","possibleConstructorReturn","getPrototypeOf","call","render","handleClick","newGame","feedback","alert","unsubscribe","forceUpdate","React","Component","App","src_Structured","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ea0847f7.chunk.js","sourcesContent":["export const EMPTY_BOARD = [\n  [null, null, null],\n  [null, null, null],\n  [null, null, null]\n]\n\nexport function checkWin(board) {\n  var i, j, r, b = board;\n\n  for (i = 0; i < 3; i++) {\n    if (\n      b[i][0] !== null &&\n      b[i][0] === b[i][1] &&\n      b[i][1] === b[i][2]\n    ) return b[i][0];\n\n    if (\n      b[0][i] !== null &&\n      b[0][i] === b[1][i] &&\n      b[1][i] === b[2][i]\n    ) return b[0][i];\n  }\n\n  if (b[0][0] !== null && b[0][0] === b[1][1] && b[1][1] === b[2][2])\n    return b[1][1];\n\n  if (b[2][0] !== null && b[2][0] === b[1][1] && b[1][1] === b[0][2])\n    return b[1][1];\n\n  r = true;\n  for (i = 0; i < 3; i++)\n    for (j = 0; j < 3; j++)\n      r = r && (b[i][j] !== null);\n\n  if (r)\n    return 3;\n\n  return false;\n}\n\nexport function dumbBotMove(board) {\n  var i, j;\n  do {\n    i = Math.floor(Math.random() * 3);\n    j = Math.floor(Math.random() * 3);\n  } while (board[i][j] !== null);\n\n  return { i, j }\n}\n\nexport function possibleMoves(board) {\n  var i, j;\n  var r = []\n  for (i = 0; i < 3; i++)\n    for (j = 0; j < 3; j++)\n      if (board[i][j] === null)\n        r.push({ i, j });\n  return r\n}\n\nexport function minimax(board, depth, maximizing) {\n  evaluated++;\n\n  var winner = checkWin(board);\n  if (winner || depth === 0)\n    return (winner === 1 ? -Infinity : winner === 2 ? Infinity : Math.random())\n\n  var value;\n  if (maximizing) {\n    value = -Infinity;\n    possibleMoves(board).forEach(({ i, j }) => {\n      board[i][j] = 2;\n      value = Math.max(value, minimax(board, depth - 1, false));\n      board[i][j] = null;\n    });\n  } else {\n    value = Infinity;\n    possibleMoves(board).forEach(({ i, j }) => {\n      board[i][j] = 1;\n      value = Math.min(value, minimax(board, depth - 1, true));\n      board[i][j] = null;\n    });\n  }\n  return value;\n}\n\nvar evaluated = 0, time;\nexport function smarterBotMove(board) {\n  var bestMove, bestValue = null;\n  evaluated = 0;\n  time = (new Date()).getTime();\n\n  possibleMoves(board).forEach(({i, j}) => {\n    board[i][j] = 2;\n    var value = minimax(board, 7, false);\n    board[i][j] = null;\n\n    if (bestValue === null || bestValue < value) {\n      bestValue = value;\n      bestMove = {i, j};\n    }\n  });\n\n  console.log('Nodes Evaluated: ', evaluated);\n  console.log('Time Taken: ', (new Date()).getTime() - time);\n  console.log('Best', bestMove, bestValue)\n\n  return bestMove;\n}","import React from 'react';\nimport './App.css';\nimport _ from 'lodash';\n\nimport { checkWin, smarterBotMove, EMPTY_BOARD } from './helpers';\n\nclass Game {\n  constructor() {\n    this.board = EMPTY_BOARD;\n    this.at = 'initial';\n    this.playerTurn = null;\n  }\n\n  players = {}\n\n  addPlayer(player, id) {\n  }\n\n  move(id, i, j) {\n    if (this.at !== 'in-game')\n      return 'Game not started.';\n    \n    if (this.playerTurn !== id)\n      return 'Not your turn';\n\n    this.board[i][j] = id;\n    this.playerTurn = this.playerTurn === 1 ? 2 : 1;\n\n    var winner = checkWin(this.board);\n    if (winner) {\n      this.winner = winner;\n      this.at = 'end-game';\n    }\n\n    this.triggerChange();\n  }\n\n  newGame(i) {\n    this.board = _.cloneDeep(EMPTY_BOARD);\n    this.at = 'in-game';\n    this.playerTurn = i;\n\n    this.triggerChange();\n  }\n\n  listeners = new Set();\n  onChange(cb) {\n    this.listeners.add(cb);\n    return _ => this.listeners.delete(cb);\n  }\n\n  triggerChange() {\n    this.listeners.forEach(l => l());\n  }\n}\n\n\nclass Bot {\n  joinGame(game) {\n    this.game = game;\n    game.onChange(this.handleGameChange);\n  }\n\n  handleGameChange = () => {\n    if (this.game.at === 'in-game' && this.game.playerTurn === 2)\n      this.move();\n  }\n\n  move() {\n    const {i, j} = smarterBotMove(this.game.board);\n    this.game.move(2, i, j)\n  }\n}\n\nclass Human {\n  joinGame(game) {\n    game.onChange(this.handleGameChange);\n  }\n\n  handleGameChange() {\n  }\n  \n  handleClick(i, j) {\n    return game.move(1, i, j)\n  }\n}\n\n\nconst\n  game = new Game(),\n  bot = new Bot(),\n  human = new Human();\n\nbot.joinGame(game);\nhuman.joinGame(game);\n\n\n\nfunction GameDisplay({ game, onClickCell }) {\n  return (\n    <div className=\"tic-tac-toe-board\">\n      {game.board.map((row, i) => (\n        <div className=\"row\" key={i}>\n          {row.map((cell, j) => (\n            <div\n              key={j}\n              className=\"cell\"\n              onClick={e => onClickCell(i, j)}>\n              {cell === 1 ? 'o' : cell === 2 ? 'x' : ''}\n            </div>\n          ))}\n        </div>\n      ))}\n\n      {game.at === 'end-game' && (\n        <div className=\"winner\">\n          Winner - {\n            game.winner === 1 ? 'Player' :\n              game.winner === 2 ? 'Bot' :\n                'Tie'\n          }\n        </div>\n      )}\n    </div>\n  )\n}\n\nclass Structured extends React.Component {\n  constructor() {\n    super();\n    this.unsubscribe = game.onChange(_ => this.forceUpdate());\n  }\n\n  componentWillUnmount() {\n    this.unsubscribe();\n  }\n\n  render = () => {\n    return (\n      <div className=\"App\">\n        <GameDisplay\n          game={game}\n          onClickCell={this.handleClick} />\n\n        {game.at !== 'in-game' && (\n          <div className=\"buttons\">\n            <button onClick={_ => game.newGame(1)}>\n              I go first\n              </button>\n            <button onClick={_ => game.newGame(2)}>\n              Bot goes first\n              </button>\n          </div>\n        )}\n      </div>\n    );\n  }\n\n  handleClick = (i, j) => {\n    var feedback = human.handleClick(i, j);\n    if (feedback) alert(feedback);\n  }\n}\n\nexport default Structured;\n","import React from 'react';\nimport './App.css';\n// import Unstructured from './Unstructured';\nimport Structured from './Structured';\n\nclass App extends React.Component{\n  render = () => {\n    return (\n      <div className=\"App\">\n        {/* <Unstructured /> */}\n        <Structured />\n      </div>\n    );\n  }\n\n  handleClick = (i, j) => {\n    this.human.handleClick(i.j)\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}